// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_bloc_pattern/test/flutter_bloc_pattern_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/widgets.dart' as _i4;
import 'package:flutter_bloc_pattern/flutter_bloc_pattern.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

import 'flutter_bloc_pattern_test.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBaseBloc_0 extends _i1.SmartFake implements _i2.BaseBloc {
  _FakeBaseBloc_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BaseBlocProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseBlocProvider extends _i1.Mock implements _i3.BaseBlocProvider {
  MockBaseBlocProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BaseBloc call(_i4.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [context],
        ),
        returnValue: _FakeBaseBloc_0(
          this,
          Invocation.method(
            #call,
            [context],
          ),
        ),
      ) as _i2.BaseBloc);
}

/// A class which mocks [BaseBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockBloc extends _i1.Mock implements _i2.BaseBloc {
  MockBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BaseBloc].
///
/// See the documentation for Mockito's code generation for more information.
class BlocA extends _i1.Mock implements _i2.BaseBloc {
  BlocA() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BaseBloc].
///
/// See the documentation for Mockito's code generation for more information.
class BlocB extends _i1.Mock implements _i2.BaseBloc {
  BlocB() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DisposeCallbackBaseBloc].
///
/// See the documentation for Mockito's code generation for more information.
class BlocC extends _i1.Mock implements _i2.DisposeCallbackBaseBloc {
  BlocC() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Dispose].
///
/// See the documentation for Mockito's code generation for more information.
class MockDispose extends _i1.Mock implements _i3.Dispose {
  MockDispose() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void call() => super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
